#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('se-backend:server');
const http = require('http');
const db = require('../core/database');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// mqtt server

var mqtt = require('mqtt')
var json = require('json5')
var opt = {
  port: 8883
}


var client = mqtt.connect('tcp://127.0.0.1', opt)

client.on('connect', function () {
  client.subscribe('testapp');
  client.subscribe('$SYS/broker/clients/connected');
  console.log(`connected to ${client.options.host}:${client.options.port}`);
});

module.exports.onlineNum = 0

client.on('message', async function (topic, msg) {
  if (topic === 'testapp') {
    const message = json.parse(msg)
    const { clientId } = message
    const device = await db.deviceModel.findOne({ clientId });
    if (!device) {  // 如果设备不存在，注册该设备
      const { timestamp } = message
      await db.deviceModel({ clientId, timestamp }).save();
    } else if (!device.timestamp) { // 如果设备未激活，激活该设备
      const { timestamp } = message
      await db.deviceModel.findOneAndUpdate(
         { clientId },
         {
          $set: { timestamp }
        }
      )
    }
    await db.dataModel({ ...message }).save();
  }
  else {  // 在线连接数
    let onlineNum = json.parse(msg) > 0 ? json.parse(msg) - 1 : 0;
    module.exports.onlineNum = onlineNum
  }
});